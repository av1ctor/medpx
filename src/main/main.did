type DoctorRequest = record {
    license_num: text;
    prescription_template: opt text;
};

type DoctorResponse = record {
    license_num: text;
    prescription_template: opt text;
};

type PatientRequest = record {
    birth_date: nat64;
};

type PatientResponse = record {
    birth_date: nat64;
};

type StaffRole = variant {
    Admin;
    Contributor;
    Member;
};

type StaffRequest = record {
    role: StaffRole;
};

type StaffResponse = record {
    role: StaffRole;
};

type ThirdPartyKind = variant {
    Hospital;
    DrugStore;
    Other;
};

type ThirdPartyRequest = record {
    kind: ThirdPartyKind;
};

type ThirdPartyResponse = record {
    kind: ThirdPartyKind;
};

type UserKindRequest = variant {
    Doctor: DoctorRequest;
    Patient: PatientRequest;
    ThirdParty: ThirdPartyRequest;
    Staff: StaffRequest;    
};

type UserRequest = record {
    name: text;
    email: text;
    kind: UserKindRequest;
};

type UserKindResponse = variant {
    Doctor: DoctorResponse;
    Patient: PatientResponse;
    ThirdParty: ThirdPartyResponse;
    Staff: StaffResponse;    
};

type UserResponse = record {
    id: principal;
    name: text;
    email: text;
    active: bool;
    banned: bool;
    kind: UserKindResponse;
    created_at: nat64;
    updated_at: opt nat64;
};

type UserResponseResult = variant {
    Err: text;
    Ok: UserResponse;
};

type KeyKind = variant {
    EmailAddress;
    PassportNumber;
    Random;
    PhoneNumber;
    IdCardNumber;
    DriverLicenseNumber;
    DoctorLicenseNumber;
};

type KeyRequest = record {
    kind: KeyKind;
    country: opt text;
    value: text;
};

type KeyResponse = record {
    id: text;
    kind: KeyKind;
    country: opt text;
    value: text;
    created_at: nat64;
};

type KeyResponseResult = variant {
    Err: text;
    Ok: KeyResponse;
};

type GroupRequest = record {
    members: vec principal;
};

type GroupResponse = record {
    id: text;
    members: vec principal;
    created_at: nat64;
    created_by: principal;
};

type GroupResponseResult = variant {
    Err: text;
    Ok: GroupResponse;
};

type PrescriptionRequest = record {
    patient: principal;
    contents: vec nat8;
};

type PrescriptionResponse = record {
    id: text;
    doctor: principal;
    patient: principal;
    contents: vec nat8;
    created_at: nat64;
};

type PrescriptionResponseResult = variant {
    Err: text;
    Ok: PrescriptionResponse;
};

type PrescriptionAuthKind = variant {
    Read;
    Write;
    ReadWrite;
    All;
};

type PrescriptionAuthTarget = variant {
    User: principal;
    Group: text;
};

type PrescriptionAuthRequest = record {
    prescription_id: text;
    kind: PrescriptionAuthKind;
    to: PrescriptionAuthTarget;
    expires_at: opt nat64;
};

type PrescriptionAuthResponse = record {
    id: text;
    prescription_id: text;
    kind: PrescriptionAuthKind;
    from: principal;
    to: PrescriptionAuthTarget;
    expires_at: opt nat64;
    created_at: nat64;
    updated_at: opt nat64;
};

type PrescriptionAuthResponseResult = variant {
    Err: text;
    Ok: PrescriptionAuthResponse;
};

type DefaultResponseResult = variant {
    Err: text;
    Ok
};

type Pagination = record {
    offset: nat32;
    limit: nat32;
};

type FindPrescriptionsResult = variant {
    Err: text;
    Ok: vec PrescriptionResponse;
};

type FindKeysResult = variant {
    Err: text;
    Ok: vec KeyResponse;
};

type FindGroupsResult = variant {
    Err: text;
    Ok: vec GroupResponse;
};

type FindPrescriptionAuthsResult = variant {
    Err: text;
    Ok: vec PrescriptionAuthResponse;
};

type UserKeyResult = variant {
    Err: text;
    Ok: text;
};

service : {
    user_create: (UserRequest) -> (UserResponseResult);
    user_update: (principal, UserRequest) -> (UserResponseResult);
    user_delete: (principal) -> (DefaultResponseResult);
    user_find_me: () -> (UserResponseResult) query;
    user_find_by_id: (principal) -> (UserResponseResult) query;
    user_find_by_key: (KeyKind, opt text, text) -> (UserResponseResult) query;
    user_get_public_key: (vec nat8) -> (UserKeyResult);
    user_get_encrypted_symmetric_key: (vec nat8, vec nat8, vec nat8) -> (UserKeyResult);
    user_find_prescriptions: (principal, Pagination) -> (FindPrescriptionsResult) query;

    key_create: (KeyRequest) -> (KeyResponseResult);
    key_delete: (text) -> (DefaultResponseResult);
    key_find_by_id: (text) -> (KeyResponseResult) query;
    key_find_by_value: (KeyKind, opt text, text) -> (KeyResponseResult) query;
    key_find_all_by_user: (principal, Pagination) -> (FindKeysResult) query;

    group_create: (GroupRequest) -> (GroupResponseResult);
    group_delete: (text) -> (DefaultResponseResult);
    group_find_by_id: (text) -> (GroupResponseResult) query;
    group_find_all_by_user: (principal, Pagination) -> (FindGroupsResult) query;

    prescription_create: (PrescriptionRequest) -> (PrescriptionResponseResult);
    prescription_delete: (text) -> (DefaultResponseResult);
    prescription_find_by_id: (text) -> (PrescriptionResponseResult) query;
    
    prescription_auth_create: (PrescriptionAuthRequest) -> (PrescriptionAuthResponseResult);
    prescription_auth_delete: (text) -> (DefaultResponseResult);
    prescription_auth_find_by_id: (text) -> (PrescriptionAuthResponseResult) query;
    prescription_auth_find_by_prescription: (text) -> (FindPrescriptionAuthsResult) query;
}

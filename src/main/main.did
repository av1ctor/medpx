type UserResponseResult = variant {
    Err: text;
    Ok: UserResponse;
};

type DoctorRequest = record {
    license_num: text;
    name: text;
    email: text;
    prescription_template: opt text;
};

type DoctorResponse = record {
    id: principal;
    license_num: text;
    name: text;
    email: text;
    prescription_template: opt text;
    created_at: nat64;
    updated_at: opt nat64;
};

type DoctorResponseResult = variant {
    Err: text;
    Ok: DoctorResponse;
};

type PatientRequest = record {
    name: text;
    email: text;
    birth_date: nat64;
};

type PatientResponse = record {
    id: principal;
    name: text;
    email: text;
    birth_date: nat64;
    created_at: nat64;
    updated_at: opt nat64;
};

type PatientResponseResult = variant {
    Err: text;
    Ok: PatientResponse;
};

type StaffRole = variant {
    Admin;
    Contributor;
    Member;
};

type StaffRequest = record {
    name: text;
    role: StaffRole;
};

type StaffResponse = record {
    id: principal;
    name: text;
    role: StaffRole;
    created_at: nat64;
    updated_at: opt nat64;
};

type StaffResponseResult = variant {
    Err: text;
    Ok: StaffResponse;
};

type ThirdPartyKind = variant {
    Hospital;
    DrugStore;
    Other;
};

type ThirdPartyRequest = record {
    kind: ThirdPartyKind;
    name: text;
    email: text;
};

type ThirdPartyResponse = record {
    id: principal;
    kind: ThirdPartyKind;
    name: text;
    email: text;
    created_at: nat64;
    updated_at: opt nat64;
};

type ThirdPartyResponseResult = variant {
    Err: text;
    Ok: ThirdPartyResponse;
};

type UserKindResponse = variant {
    Doctor: DoctorResponse;
    Patient: PatientResponse;
    ThirdParty: ThirdPartyResponse;
    Staff: StaffResponse;    
};

type UserResponse = record {
    kind: UserKindResponse;
    active: bool;
    banned: bool;
};

type KeyKind = variant {
    EmailAddress;
    PassportNumber;
    Random;
    PhoneNumber;
    IdCardNumber;
    DriverLicenseNumber;
    DoctorLicenseNumber;
};

type KeyRequest = record {
    country: text;
    kind: KeyKind;
    value: text;
};

type KeyResponse = record {
    id: text;
    country: text;
    kind: KeyKind;
    value: text;
    created_at: nat64;
};

type KeyResponseResult = variant {
    Err: text;
    Ok: KeyResponse;
};

type PrescriptionRequest = record {
    patient: principal;
    contents: vec nat8;
};

type PrescriptionResponse = record {
    id: text;
    doctor: principal;
    patient: principal;
    contents: vec nat8;
    created_at: nat64;
};

type PrescriptionResponseResult = variant {
    Err: text;
    Ok: PrescriptionResponse;
};

type PrescriptionAuthKind = variant {
    Read;
    Write;
    ReadWrite;
    All;
};

type PrescriptionAuthRequest = record {
    prescription_id: text;
    kind: PrescriptionAuthKind;
    to: text;
    expires_at: opt nat64;
};

type PrescriptionAuthResponse = record {
    prescription_id: text;
    kind: PrescriptionAuthKind;
    from: text;
    to: text;
    expires_at: opt nat64;
    created_at: nat64;
    updated_at: opt nat64;
};

type PrescriptionAuthResponseResult = variant {
    Err: text;
    Ok: PrescriptionAuthResponse;
};

type DefaultResponseResult = variant {
    Err: text;
    Ok
};

type Pagination = record {
    offset: nat32;
    limit: nat32;
};

type FindPrescriptionsResult = variant {
    Err: text;
    Ok: vec PrescriptionResponse;
};

type FindKeysResult = variant {
    Err: text;
    Ok: vec KeyResponse;
};

service : {
    user_find_me: () -> (UserResponseResult) query;
    user_find_by_id: (principal) -> (UserResponseResult) query;
    user_find_by_key: (text, KeyKind, text) -> (UserResponseResult) query;
    
    doctor_create: (DoctorRequest) -> (DoctorResponseResult);
    doctor_update: (principal, DoctorRequest) -> (DoctorResponseResult);
    doctor_delete: (principal) -> (DefaultResponseResult);
    doctor_find_by_id: (principal) -> (DoctorResponseResult) query;
    doctor_find_prescriptions: (principal, Pagination) -> (FindPrescriptionsResult) query;

    patient_create: (PatientRequest) -> (PatientResponseResult);
    patient_update: (principal, PatientRequest) -> (PatientResponseResult);
    patient_delete: (principal) -> (DefaultResponseResult);
    patient_find_by_id: (principal) -> (PatientResponseResult) query;
    patient_find_prescriptions: (principal, Pagination) -> (FindPrescriptionsResult) query;

    staff_create: (StaffRequest) -> (StaffResponseResult);
    staff_update: (principal, StaffRequest) -> (StaffResponseResult);
    staff_delete: (principal) -> (DefaultResponseResult);
    staff_find_by_id: (principal) -> (StaffResponseResult) query;

    thirdparty_create: (ThirdPartyRequest) -> (ThirdPartyResponseResult);
    thirdparty_update: (principal, ThirdPartyRequest) -> (ThirdPartyResponseResult);
    thirdparty_delete: (principal) -> (DefaultResponseResult);
    thirdparty_find_by_id: (principal) -> (ThirdPartyResponseResult) query;

    key_create: (KeyRequest) -> (KeyResponseResult);
    key_delete: (text) -> (DefaultResponseResult);
    key_find_by_id: (text) -> (KeyResponseResult) query;
    key_find_by_value: (text, KeyKind, text) -> (KeyResponseResult) query;
    key_find_all_by_user: (principal, Pagination) -> (FindKeysResult) query;

    prescription_create: (PrescriptionRequest) -> (PrescriptionResponseResult);
    prescription_find_by_id: (text) -> (PrescriptionResponseResult) query;
    
    prescription_auth_create: (PrescriptionAuthRequest) -> (PrescriptionAuthResponseResult);
    prescription_auth_find_by_id: (text) -> (PrescriptionAuthResponseResult) query;
}
